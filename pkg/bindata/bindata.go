// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/gitignore/Actionscript
// conf/gitignore/Ada
// conf/gitignore/Agda
// conf/gitignore/Android
// conf/gitignore/Anjuta
// conf/gitignore/AppEngine
// conf/gitignore/AppceleratorTitanium
// conf/gitignore/ArchLinuxPackages
// conf/gitignore/Archives
// conf/gitignore/Autotools
// conf/gitignore/BricxCC
// conf/gitignore/C
// conf/gitignore/C Sharp
// conf/gitignore/C++
// conf/gitignore/CFWheels
// conf/gitignore/CMake
// conf/gitignore/CUDA
// conf/gitignore/CVS
// conf/gitignore/CakePHP
// conf/gitignore/ChefCookbook
// conf/gitignore/Cloud9
// conf/gitignore/CodeIgniter
// conf/gitignore/CodeKit
// conf/gitignore/CommonLisp
// conf/gitignore/Composer
// conf/gitignore/Concrete5
// conf/gitignore/Coq
// conf/gitignore/CraftCMS
// conf/gitignore/DM
// conf/gitignore/Dart
// conf/gitignore/DartEditor
// conf/gitignore/Delphi
// conf/gitignore/Dreamweaver
// conf/gitignore/Drupal
// conf/gitignore/EPiServer
// conf/gitignore/Eagle
// conf/gitignore/Eclipse
// conf/gitignore/EiffelStudio
// conf/gitignore/Elisp
// conf/gitignore/Elixir
// conf/gitignore/Emacs
// conf/gitignore/Ensime
// conf/gitignore/Erlang
// conf/gitignore/Espresso
// conf/gitignore/ExpressionEngine
// conf/gitignore/ExtJs
// conf/gitignore/Fancy
// conf/gitignore/Finale
// conf/gitignore/FlexBuilder
// conf/gitignore/ForceDotCom
// conf/gitignore/FuelPHP
// conf/gitignore/GWT
// conf/gitignore/Gcov
// conf/gitignore/GitBook
// conf/gitignore/Go
// conf/gitignore/Gradle
// conf/gitignore/Grails
// conf/gitignore/Haskell
// conf/gitignore/IGORPro
// conf/gitignore/IPythonNotebook
// conf/gitignore/Idris
// conf/gitignore/JDeveloper
// conf/gitignore/Java
// conf/gitignore/Jboss
// conf/gitignore/Jekyll
// conf/gitignore/JetBrains
// conf/gitignore/Joomla
// conf/gitignore/KDevelop4
// conf/gitignore/Kate
// conf/gitignore/KiCAD
// conf/gitignore/Kohana
// conf/gitignore/LabVIEW
// conf/gitignore/Laravel
// conf/gitignore/Lazarus
// conf/gitignore/Leiningen
// conf/gitignore/LemonStand
// conf/gitignore/LibreOffice
// conf/gitignore/Lilypond
// conf/gitignore/Linux
// conf/gitignore/Lithium
// conf/gitignore/Lua
// conf/gitignore/LyX
// conf/gitignore/Magento
// conf/gitignore/Matlab
// conf/gitignore/Maven
// conf/gitignore/Mercurial
// conf/gitignore/Mercury
// conf/gitignore/MetaProgrammingSystem
// conf/gitignore/MicrosoftOffice
// conf/gitignore/ModelSim
// conf/gitignore/Momentics
// conf/gitignore/MonoDevelop
// conf/gitignore/Nanoc
// conf/gitignore/NetBeans
// conf/gitignore/Nim
// conf/gitignore/Ninja
// conf/gitignore/Node
// conf/gitignore/NotepadPP
// conf/gitignore/OCaml
// conf/gitignore/Objective-C
// conf/gitignore/Opa
// conf/gitignore/OpenCart
// conf/gitignore/OracleForms
// conf/gitignore/Packer
// conf/gitignore/Perl
// conf/gitignore/Phalcon
// conf/gitignore/PlayFramework
// conf/gitignore/Plone
// conf/gitignore/Prestashop
// conf/gitignore/Processing
// conf/gitignore/Python
// conf/gitignore/Qooxdoo
// conf/gitignore/Qt
// conf/gitignore/R
// conf/gitignore/ROS
// conf/gitignore/Rails
// conf/gitignore/Redcar
// conf/gitignore/Redis
// conf/gitignore/RhodesRhomobile
// conf/gitignore/Ruby
// conf/gitignore/Rust
// conf/gitignore/SBT
// conf/gitignore/SCons
// conf/gitignore/SVN
// conf/gitignore/Sass
// conf/gitignore/Scala
// conf/gitignore/Scrivener
// conf/gitignore/Sdcc
// conf/gitignore/SeamGen
// conf/gitignore/SketchUp
// conf/gitignore/SlickEdit
// conf/gitignore/Stella
// conf/gitignore/SublimeText
// conf/gitignore/SugarCRM
// conf/gitignore/Swift
// conf/gitignore/Symfony
// conf/gitignore/SymphonyCMS
// conf/gitignore/SynopsysVCS
// conf/gitignore/Tags
// conf/gitignore/TeX
// conf/gitignore/TextMate
// conf/gitignore/Textpattern
// conf/gitignore/TortoiseGit
// conf/gitignore/TurboGears2
// conf/gitignore/Typo3
// conf/gitignore/Umbraco
// conf/gitignore/Unity
// conf/gitignore/VVVV
// conf/gitignore/Vagrant
// conf/gitignore/Vim
// conf/gitignore/VirtualEnv
// conf/gitignore/VisualStudio
// conf/gitignore/VisualStudioCode
// conf/gitignore/Waf
// conf/gitignore/WebMethods
// conf/gitignore/Windows
// conf/gitignore/WordPress
// conf/gitignore/Xcode
// conf/gitignore/XilinxISE
// conf/gitignore/Xojo
// conf/gitignore/Yeoman
// conf/gitignore/Yii
// conf/gitignore/ZendFramework
// conf/gitignore/Zephir
// conf/gitignore/macOS
// conf/label/Default
// conf/license/Abstyles License
// conf/license/Academic Free License v1.1
// conf/license/Academic Free License v1.2
// conf/license/Academic Free License v2.0
// conf/license/Academic Free License v2.1
// conf/license/Academic Free License v3.0
// conf/license/Affero General Public License v1.0
// conf/license/Apache License 1.0
// conf/license/Apache License 1.1
// conf/license/Apache License 2.0
// conf/license/Artistic License 1.0
// conf/license/Artistic License 2.0
// conf/license/BSD 2-clause License
// conf/license/BSD 3-clause License
// conf/license/BSD 4-clause License
// conf/license/Creative Commons CC0 1.0 Universal
// conf/license/Eclipse Public License 1.0
// conf/license/Educational Community License v1.0
// conf/license/Educational Community License v2.0
// conf/license/GNU Affero General Public License v3.0
// conf/license/GNU Free Documentation License v1.1
// conf/license/GNU Free Documentation License v1.2
// conf/license/GNU Free Documentation License v1.3
// conf/license/GNU General Public License v1.0
// conf/license/GNU General Public License v2.0
// conf/license/GNU General Public License v3.0
// conf/license/GNU Lesser General Public License v2.1
// conf/license/GNU Lesser General Public License v3.0
// conf/license/GNU Library General Public License v2.0
// conf/license/ISC license
// conf/license/MIT License
// conf/license/Mozilla Public License 1.0
// conf/license/Mozilla Public License 1.1
// conf/license/Mozilla Public License 2.0
// conf/locale/locale_bg-BG.ini
// conf/locale/locale_cs-CZ.ini
// conf/locale/locale_de-DE.ini
// conf/locale/locale_en-GB.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_es-ES.ini
// conf/locale/locale_fi-FI.ini
// conf/locale/locale_fr-FR.ini
// conf/locale/locale_gl-ES.ini
// conf/locale/locale_hu-HU.ini
// conf/locale/locale_it-IT.ini
// conf/locale/locale_ja-JP.ini
// conf/locale/locale_ko-KR.ini
// conf/locale/locale_lv-LV.ini
// conf/locale/locale_nl-NL.ini
// conf/locale/locale_pl-PL.ini
// conf/locale/locale_pt-BR.ini
// conf/locale/locale_ru-RU.ini
// conf/locale/locale_sr-SP.ini
// conf/locale/locale_sv-SE.ini
// conf/locale/locale_tr-TR.ini
// conf/locale/locale_uk-UA.ini
// conf/locale/locale_zh-CN.ini
// conf/locale/locale_zh-HK.ini
// conf/locale/locale_zh-TW.ini
// conf/readme/Default
// DO NOT EDIT!

package bindata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// confAppIni reads file data from disk. It returns an error on failure.
func confAppIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/app.ini"
	name := "conf/app.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreActionscript reads file data from disk. It returns an error on failure.
func confGitignoreActionscript() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Actionscript"
	name := "conf/gitignore/Actionscript"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAda reads file data from disk. It returns an error on failure.
func confGitignoreAda() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Ada"
	name := "conf/gitignore/Ada"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAgda reads file data from disk. It returns an error on failure.
func confGitignoreAgda() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Agda"
	name := "conf/gitignore/Agda"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAndroid reads file data from disk. It returns an error on failure.
func confGitignoreAndroid() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Android"
	name := "conf/gitignore/Android"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAnjuta reads file data from disk. It returns an error on failure.
func confGitignoreAnjuta() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Anjuta"
	name := "conf/gitignore/Anjuta"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAppengine reads file data from disk. It returns an error on failure.
func confGitignoreAppengine() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/AppEngine"
	name := "conf/gitignore/AppEngine"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAppceleratortitanium reads file data from disk. It returns an error on failure.
func confGitignoreAppceleratortitanium() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/AppceleratorTitanium"
	name := "conf/gitignore/AppceleratorTitanium"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreArchlinuxpackages reads file data from disk. It returns an error on failure.
func confGitignoreArchlinuxpackages() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ArchLinuxPackages"
	name := "conf/gitignore/ArchLinuxPackages"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreArchives reads file data from disk. It returns an error on failure.
func confGitignoreArchives() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Archives"
	name := "conf/gitignore/Archives"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreAutotools reads file data from disk. It returns an error on failure.
func confGitignoreAutotools() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Autotools"
	name := "conf/gitignore/Autotools"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreBricxcc reads file data from disk. It returns an error on failure.
func confGitignoreBricxcc() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/BricxCC"
	name := "conf/gitignore/BricxCC"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreC reads file data from disk. It returns an error on failure.
func confGitignoreC() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/C"
	name := "conf/gitignore/C"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCSharp reads file data from disk. It returns an error on failure.
func confGitignoreCSharp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/C Sharp"
	name := "conf/gitignore/C Sharp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreC2 reads file data from disk. It returns an error on failure.
func confGitignoreC2() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/C++"
	name := "conf/gitignore/C++"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCfwheels reads file data from disk. It returns an error on failure.
func confGitignoreCfwheels() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CFWheels"
	name := "conf/gitignore/CFWheels"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCmake reads file data from disk. It returns an error on failure.
func confGitignoreCmake() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CMake"
	name := "conf/gitignore/CMake"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCuda reads file data from disk. It returns an error on failure.
func confGitignoreCuda() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CUDA"
	name := "conf/gitignore/CUDA"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCvs reads file data from disk. It returns an error on failure.
func confGitignoreCvs() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CVS"
	name := "conf/gitignore/CVS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCakephp reads file data from disk. It returns an error on failure.
func confGitignoreCakephp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CakePHP"
	name := "conf/gitignore/CakePHP"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreChefcookbook reads file data from disk. It returns an error on failure.
func confGitignoreChefcookbook() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ChefCookbook"
	name := "conf/gitignore/ChefCookbook"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCloud9 reads file data from disk. It returns an error on failure.
func confGitignoreCloud9() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Cloud9"
	name := "conf/gitignore/Cloud9"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCodeigniter reads file data from disk. It returns an error on failure.
func confGitignoreCodeigniter() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CodeIgniter"
	name := "conf/gitignore/CodeIgniter"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCodekit reads file data from disk. It returns an error on failure.
func confGitignoreCodekit() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CodeKit"
	name := "conf/gitignore/CodeKit"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCommonlisp reads file data from disk. It returns an error on failure.
func confGitignoreCommonlisp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CommonLisp"
	name := "conf/gitignore/CommonLisp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreComposer reads file data from disk. It returns an error on failure.
func confGitignoreComposer() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Composer"
	name := "conf/gitignore/Composer"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreConcrete5 reads file data from disk. It returns an error on failure.
func confGitignoreConcrete5() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Concrete5"
	name := "conf/gitignore/Concrete5"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCoq reads file data from disk. It returns an error on failure.
func confGitignoreCoq() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Coq"
	name := "conf/gitignore/Coq"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreCraftcms reads file data from disk. It returns an error on failure.
func confGitignoreCraftcms() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/CraftCMS"
	name := "conf/gitignore/CraftCMS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDm reads file data from disk. It returns an error on failure.
func confGitignoreDm() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/DM"
	name := "conf/gitignore/DM"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDart reads file data from disk. It returns an error on failure.
func confGitignoreDart() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Dart"
	name := "conf/gitignore/Dart"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDarteditor reads file data from disk. It returns an error on failure.
func confGitignoreDarteditor() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/DartEditor"
	name := "conf/gitignore/DartEditor"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDelphi reads file data from disk. It returns an error on failure.
func confGitignoreDelphi() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Delphi"
	name := "conf/gitignore/Delphi"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDreamweaver reads file data from disk. It returns an error on failure.
func confGitignoreDreamweaver() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Dreamweaver"
	name := "conf/gitignore/Dreamweaver"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreDrupal reads file data from disk. It returns an error on failure.
func confGitignoreDrupal() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Drupal"
	name := "conf/gitignore/Drupal"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEpiserver reads file data from disk. It returns an error on failure.
func confGitignoreEpiserver() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/EPiServer"
	name := "conf/gitignore/EPiServer"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEagle reads file data from disk. It returns an error on failure.
func confGitignoreEagle() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Eagle"
	name := "conf/gitignore/Eagle"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEclipse reads file data from disk. It returns an error on failure.
func confGitignoreEclipse() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Eclipse"
	name := "conf/gitignore/Eclipse"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEiffelstudio reads file data from disk. It returns an error on failure.
func confGitignoreEiffelstudio() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/EiffelStudio"
	name := "conf/gitignore/EiffelStudio"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreElisp reads file data from disk. It returns an error on failure.
func confGitignoreElisp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Elisp"
	name := "conf/gitignore/Elisp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreElixir reads file data from disk. It returns an error on failure.
func confGitignoreElixir() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Elixir"
	name := "conf/gitignore/Elixir"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEmacs reads file data from disk. It returns an error on failure.
func confGitignoreEmacs() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Emacs"
	name := "conf/gitignore/Emacs"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEnsime reads file data from disk. It returns an error on failure.
func confGitignoreEnsime() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Ensime"
	name := "conf/gitignore/Ensime"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreErlang reads file data from disk. It returns an error on failure.
func confGitignoreErlang() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Erlang"
	name := "conf/gitignore/Erlang"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreEspresso reads file data from disk. It returns an error on failure.
func confGitignoreEspresso() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Espresso"
	name := "conf/gitignore/Espresso"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreExpressionengine reads file data from disk. It returns an error on failure.
func confGitignoreExpressionengine() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ExpressionEngine"
	name := "conf/gitignore/ExpressionEngine"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreExtjs reads file data from disk. It returns an error on failure.
func confGitignoreExtjs() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ExtJs"
	name := "conf/gitignore/ExtJs"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreFancy reads file data from disk. It returns an error on failure.
func confGitignoreFancy() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Fancy"
	name := "conf/gitignore/Fancy"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreFinale reads file data from disk. It returns an error on failure.
func confGitignoreFinale() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Finale"
	name := "conf/gitignore/Finale"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreFlexbuilder reads file data from disk. It returns an error on failure.
func confGitignoreFlexbuilder() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/FlexBuilder"
	name := "conf/gitignore/FlexBuilder"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreForcedotcom reads file data from disk. It returns an error on failure.
func confGitignoreForcedotcom() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ForceDotCom"
	name := "conf/gitignore/ForceDotCom"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreFuelphp reads file data from disk. It returns an error on failure.
func confGitignoreFuelphp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/FuelPHP"
	name := "conf/gitignore/FuelPHP"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGwt reads file data from disk. It returns an error on failure.
func confGitignoreGwt() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/GWT"
	name := "conf/gitignore/GWT"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGcov reads file data from disk. It returns an error on failure.
func confGitignoreGcov() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Gcov"
	name := "conf/gitignore/Gcov"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGitbook reads file data from disk. It returns an error on failure.
func confGitignoreGitbook() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/GitBook"
	name := "conf/gitignore/GitBook"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGo reads file data from disk. It returns an error on failure.
func confGitignoreGo() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Go"
	name := "conf/gitignore/Go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGradle reads file data from disk. It returns an error on failure.
func confGitignoreGradle() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Gradle"
	name := "conf/gitignore/Gradle"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreGrails reads file data from disk. It returns an error on failure.
func confGitignoreGrails() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Grails"
	name := "conf/gitignore/Grails"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreHaskell reads file data from disk. It returns an error on failure.
func confGitignoreHaskell() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Haskell"
	name := "conf/gitignore/Haskell"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreIgorpro reads file data from disk. It returns an error on failure.
func confGitignoreIgorpro() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/IGORPro"
	name := "conf/gitignore/IGORPro"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreIpythonnotebook reads file data from disk. It returns an error on failure.
func confGitignoreIpythonnotebook() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/IPythonNotebook"
	name := "conf/gitignore/IPythonNotebook"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreIdris reads file data from disk. It returns an error on failure.
func confGitignoreIdris() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Idris"
	name := "conf/gitignore/Idris"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJdeveloper reads file data from disk. It returns an error on failure.
func confGitignoreJdeveloper() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/JDeveloper"
	name := "conf/gitignore/JDeveloper"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJava reads file data from disk. It returns an error on failure.
func confGitignoreJava() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Java"
	name := "conf/gitignore/Java"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJboss reads file data from disk. It returns an error on failure.
func confGitignoreJboss() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Jboss"
	name := "conf/gitignore/Jboss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJekyll reads file data from disk. It returns an error on failure.
func confGitignoreJekyll() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Jekyll"
	name := "conf/gitignore/Jekyll"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJetbrains reads file data from disk. It returns an error on failure.
func confGitignoreJetbrains() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/JetBrains"
	name := "conf/gitignore/JetBrains"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreJoomla reads file data from disk. It returns an error on failure.
func confGitignoreJoomla() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Joomla"
	name := "conf/gitignore/Joomla"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreKdevelop4 reads file data from disk. It returns an error on failure.
func confGitignoreKdevelop4() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/KDevelop4"
	name := "conf/gitignore/KDevelop4"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreKate reads file data from disk. It returns an error on failure.
func confGitignoreKate() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Kate"
	name := "conf/gitignore/Kate"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreKicad reads file data from disk. It returns an error on failure.
func confGitignoreKicad() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/KiCAD"
	name := "conf/gitignore/KiCAD"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreKohana reads file data from disk. It returns an error on failure.
func confGitignoreKohana() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Kohana"
	name := "conf/gitignore/Kohana"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLabview reads file data from disk. It returns an error on failure.
func confGitignoreLabview() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/LabVIEW"
	name := "conf/gitignore/LabVIEW"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLaravel reads file data from disk. It returns an error on failure.
func confGitignoreLaravel() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Laravel"
	name := "conf/gitignore/Laravel"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLazarus reads file data from disk. It returns an error on failure.
func confGitignoreLazarus() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Lazarus"
	name := "conf/gitignore/Lazarus"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLeiningen reads file data from disk. It returns an error on failure.
func confGitignoreLeiningen() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Leiningen"
	name := "conf/gitignore/Leiningen"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLemonstand reads file data from disk. It returns an error on failure.
func confGitignoreLemonstand() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/LemonStand"
	name := "conf/gitignore/LemonStand"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLibreoffice reads file data from disk. It returns an error on failure.
func confGitignoreLibreoffice() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/LibreOffice"
	name := "conf/gitignore/LibreOffice"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLilypond reads file data from disk. It returns an error on failure.
func confGitignoreLilypond() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Lilypond"
	name := "conf/gitignore/Lilypond"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLinux reads file data from disk. It returns an error on failure.
func confGitignoreLinux() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Linux"
	name := "conf/gitignore/Linux"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLithium reads file data from disk. It returns an error on failure.
func confGitignoreLithium() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Lithium"
	name := "conf/gitignore/Lithium"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLua reads file data from disk. It returns an error on failure.
func confGitignoreLua() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Lua"
	name := "conf/gitignore/Lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreLyx reads file data from disk. It returns an error on failure.
func confGitignoreLyx() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/LyX"
	name := "conf/gitignore/LyX"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMagento reads file data from disk. It returns an error on failure.
func confGitignoreMagento() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Magento"
	name := "conf/gitignore/Magento"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMatlab reads file data from disk. It returns an error on failure.
func confGitignoreMatlab() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Matlab"
	name := "conf/gitignore/Matlab"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMaven reads file data from disk. It returns an error on failure.
func confGitignoreMaven() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Maven"
	name := "conf/gitignore/Maven"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMercurial reads file data from disk. It returns an error on failure.
func confGitignoreMercurial() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Mercurial"
	name := "conf/gitignore/Mercurial"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMercury reads file data from disk. It returns an error on failure.
func confGitignoreMercury() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Mercury"
	name := "conf/gitignore/Mercury"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMetaprogrammingsystem reads file data from disk. It returns an error on failure.
func confGitignoreMetaprogrammingsystem() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/MetaProgrammingSystem"
	name := "conf/gitignore/MetaProgrammingSystem"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMicrosoftoffice reads file data from disk. It returns an error on failure.
func confGitignoreMicrosoftoffice() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/MicrosoftOffice"
	name := "conf/gitignore/MicrosoftOffice"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreModelsim reads file data from disk. It returns an error on failure.
func confGitignoreModelsim() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ModelSim"
	name := "conf/gitignore/ModelSim"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMomentics reads file data from disk. It returns an error on failure.
func confGitignoreMomentics() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Momentics"
	name := "conf/gitignore/Momentics"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMonodevelop reads file data from disk. It returns an error on failure.
func confGitignoreMonodevelop() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/MonoDevelop"
	name := "conf/gitignore/MonoDevelop"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNanoc reads file data from disk. It returns an error on failure.
func confGitignoreNanoc() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Nanoc"
	name := "conf/gitignore/Nanoc"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNetbeans reads file data from disk. It returns an error on failure.
func confGitignoreNetbeans() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/NetBeans"
	name := "conf/gitignore/NetBeans"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNim reads file data from disk. It returns an error on failure.
func confGitignoreNim() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Nim"
	name := "conf/gitignore/Nim"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNinja reads file data from disk. It returns an error on failure.
func confGitignoreNinja() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Ninja"
	name := "conf/gitignore/Ninja"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNode reads file data from disk. It returns an error on failure.
func confGitignoreNode() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Node"
	name := "conf/gitignore/Node"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreNotepadpp reads file data from disk. It returns an error on failure.
func confGitignoreNotepadpp() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/NotepadPP"
	name := "conf/gitignore/NotepadPP"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreOcaml reads file data from disk. It returns an error on failure.
func confGitignoreOcaml() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/OCaml"
	name := "conf/gitignore/OCaml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreObjectiveC reads file data from disk. It returns an error on failure.
func confGitignoreObjectiveC() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Objective-C"
	name := "conf/gitignore/Objective-C"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreOpa reads file data from disk. It returns an error on failure.
func confGitignoreOpa() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Opa"
	name := "conf/gitignore/Opa"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreOpencart reads file data from disk. It returns an error on failure.
func confGitignoreOpencart() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/OpenCart"
	name := "conf/gitignore/OpenCart"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreOracleforms reads file data from disk. It returns an error on failure.
func confGitignoreOracleforms() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/OracleForms"
	name := "conf/gitignore/OracleForms"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePacker reads file data from disk. It returns an error on failure.
func confGitignorePacker() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Packer"
	name := "conf/gitignore/Packer"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePerl reads file data from disk. It returns an error on failure.
func confGitignorePerl() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Perl"
	name := "conf/gitignore/Perl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePhalcon reads file data from disk. It returns an error on failure.
func confGitignorePhalcon() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Phalcon"
	name := "conf/gitignore/Phalcon"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePlayframework reads file data from disk. It returns an error on failure.
func confGitignorePlayframework() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/PlayFramework"
	name := "conf/gitignore/PlayFramework"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePlone reads file data from disk. It returns an error on failure.
func confGitignorePlone() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Plone"
	name := "conf/gitignore/Plone"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePrestashop reads file data from disk. It returns an error on failure.
func confGitignorePrestashop() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Prestashop"
	name := "conf/gitignore/Prestashop"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreProcessing reads file data from disk. It returns an error on failure.
func confGitignoreProcessing() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Processing"
	name := "conf/gitignore/Processing"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignorePython reads file data from disk. It returns an error on failure.
func confGitignorePython() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Python"
	name := "conf/gitignore/Python"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreQooxdoo reads file data from disk. It returns an error on failure.
func confGitignoreQooxdoo() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Qooxdoo"
	name := "conf/gitignore/Qooxdoo"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreQt reads file data from disk. It returns an error on failure.
func confGitignoreQt() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Qt"
	name := "conf/gitignore/Qt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreR reads file data from disk. It returns an error on failure.
func confGitignoreR() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/R"
	name := "conf/gitignore/R"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRos reads file data from disk. It returns an error on failure.
func confGitignoreRos() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ROS"
	name := "conf/gitignore/ROS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRails reads file data from disk. It returns an error on failure.
func confGitignoreRails() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Rails"
	name := "conf/gitignore/Rails"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRedcar reads file data from disk. It returns an error on failure.
func confGitignoreRedcar() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Redcar"
	name := "conf/gitignore/Redcar"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRedis reads file data from disk. It returns an error on failure.
func confGitignoreRedis() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Redis"
	name := "conf/gitignore/Redis"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRhodesrhomobile reads file data from disk. It returns an error on failure.
func confGitignoreRhodesrhomobile() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/RhodesRhomobile"
	name := "conf/gitignore/RhodesRhomobile"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRuby reads file data from disk. It returns an error on failure.
func confGitignoreRuby() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Ruby"
	name := "conf/gitignore/Ruby"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreRust reads file data from disk. It returns an error on failure.
func confGitignoreRust() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Rust"
	name := "conf/gitignore/Rust"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSbt reads file data from disk. It returns an error on failure.
func confGitignoreSbt() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SBT"
	name := "conf/gitignore/SBT"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreScons reads file data from disk. It returns an error on failure.
func confGitignoreScons() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SCons"
	name := "conf/gitignore/SCons"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSvn reads file data from disk. It returns an error on failure.
func confGitignoreSvn() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SVN"
	name := "conf/gitignore/SVN"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSass reads file data from disk. It returns an error on failure.
func confGitignoreSass() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Sass"
	name := "conf/gitignore/Sass"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreScala reads file data from disk. It returns an error on failure.
func confGitignoreScala() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Scala"
	name := "conf/gitignore/Scala"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreScrivener reads file data from disk. It returns an error on failure.
func confGitignoreScrivener() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Scrivener"
	name := "conf/gitignore/Scrivener"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSdcc reads file data from disk. It returns an error on failure.
func confGitignoreSdcc() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Sdcc"
	name := "conf/gitignore/Sdcc"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSeamgen reads file data from disk. It returns an error on failure.
func confGitignoreSeamgen() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SeamGen"
	name := "conf/gitignore/SeamGen"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSketchup reads file data from disk. It returns an error on failure.
func confGitignoreSketchup() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SketchUp"
	name := "conf/gitignore/SketchUp"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSlickedit reads file data from disk. It returns an error on failure.
func confGitignoreSlickedit() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SlickEdit"
	name := "conf/gitignore/SlickEdit"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreStella reads file data from disk. It returns an error on failure.
func confGitignoreStella() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Stella"
	name := "conf/gitignore/Stella"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSublimetext reads file data from disk. It returns an error on failure.
func confGitignoreSublimetext() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SublimeText"
	name := "conf/gitignore/SublimeText"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSugarcrm reads file data from disk. It returns an error on failure.
func confGitignoreSugarcrm() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SugarCRM"
	name := "conf/gitignore/SugarCRM"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSwift reads file data from disk. It returns an error on failure.
func confGitignoreSwift() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Swift"
	name := "conf/gitignore/Swift"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSymfony reads file data from disk. It returns an error on failure.
func confGitignoreSymfony() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Symfony"
	name := "conf/gitignore/Symfony"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSymphonycms reads file data from disk. It returns an error on failure.
func confGitignoreSymphonycms() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SymphonyCMS"
	name := "conf/gitignore/SymphonyCMS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreSynopsysvcs reads file data from disk. It returns an error on failure.
func confGitignoreSynopsysvcs() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/SynopsysVCS"
	name := "conf/gitignore/SynopsysVCS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTags reads file data from disk. It returns an error on failure.
func confGitignoreTags() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Tags"
	name := "conf/gitignore/Tags"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTex reads file data from disk. It returns an error on failure.
func confGitignoreTex() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/TeX"
	name := "conf/gitignore/TeX"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTextmate reads file data from disk. It returns an error on failure.
func confGitignoreTextmate() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/TextMate"
	name := "conf/gitignore/TextMate"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTextpattern reads file data from disk. It returns an error on failure.
func confGitignoreTextpattern() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Textpattern"
	name := "conf/gitignore/Textpattern"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTortoisegit reads file data from disk. It returns an error on failure.
func confGitignoreTortoisegit() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/TortoiseGit"
	name := "conf/gitignore/TortoiseGit"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTurbogears2 reads file data from disk. It returns an error on failure.
func confGitignoreTurbogears2() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/TurboGears2"
	name := "conf/gitignore/TurboGears2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreTypo3 reads file data from disk. It returns an error on failure.
func confGitignoreTypo3() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Typo3"
	name := "conf/gitignore/Typo3"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreUmbraco reads file data from disk. It returns an error on failure.
func confGitignoreUmbraco() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Umbraco"
	name := "conf/gitignore/Umbraco"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreUnity reads file data from disk. It returns an error on failure.
func confGitignoreUnity() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Unity"
	name := "conf/gitignore/Unity"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVvvv reads file data from disk. It returns an error on failure.
func confGitignoreVvvv() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/VVVV"
	name := "conf/gitignore/VVVV"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVagrant reads file data from disk. It returns an error on failure.
func confGitignoreVagrant() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Vagrant"
	name := "conf/gitignore/Vagrant"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVim reads file data from disk. It returns an error on failure.
func confGitignoreVim() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Vim"
	name := "conf/gitignore/Vim"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVirtualenv reads file data from disk. It returns an error on failure.
func confGitignoreVirtualenv() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/VirtualEnv"
	name := "conf/gitignore/VirtualEnv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVisualstudio reads file data from disk. It returns an error on failure.
func confGitignoreVisualstudio() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/VisualStudio"
	name := "conf/gitignore/VisualStudio"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreVisualstudiocode reads file data from disk. It returns an error on failure.
func confGitignoreVisualstudiocode() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/VisualStudioCode"
	name := "conf/gitignore/VisualStudioCode"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreWaf reads file data from disk. It returns an error on failure.
func confGitignoreWaf() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Waf"
	name := "conf/gitignore/Waf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreWebmethods reads file data from disk. It returns an error on failure.
func confGitignoreWebmethods() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/WebMethods"
	name := "conf/gitignore/WebMethods"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreWindows reads file data from disk. It returns an error on failure.
func confGitignoreWindows() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Windows"
	name := "conf/gitignore/Windows"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreWordpress reads file data from disk. It returns an error on failure.
func confGitignoreWordpress() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/WordPress"
	name := "conf/gitignore/WordPress"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreXcode reads file data from disk. It returns an error on failure.
func confGitignoreXcode() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Xcode"
	name := "conf/gitignore/Xcode"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreXilinxise reads file data from disk. It returns an error on failure.
func confGitignoreXilinxise() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/XilinxISE"
	name := "conf/gitignore/XilinxISE"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreXojo reads file data from disk. It returns an error on failure.
func confGitignoreXojo() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Xojo"
	name := "conf/gitignore/Xojo"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreYeoman reads file data from disk. It returns an error on failure.
func confGitignoreYeoman() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Yeoman"
	name := "conf/gitignore/Yeoman"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreYii reads file data from disk. It returns an error on failure.
func confGitignoreYii() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Yii"
	name := "conf/gitignore/Yii"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreZendframework reads file data from disk. It returns an error on failure.
func confGitignoreZendframework() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/ZendFramework"
	name := "conf/gitignore/ZendFramework"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreZephir reads file data from disk. It returns an error on failure.
func confGitignoreZephir() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/Zephir"
	name := "conf/gitignore/Zephir"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confGitignoreMacos reads file data from disk. It returns an error on failure.
func confGitignoreMacos() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/gitignore/macOS"
	name := "conf/gitignore/macOS"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLabelDefault reads file data from disk. It returns an error on failure.
func confLabelDefault() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/label/Default"
	name := "conf/label/Default"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAbstylesLicense reads file data from disk. It returns an error on failure.
func confLicenseAbstylesLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Abstyles License"
	name := "conf/license/Abstyles License"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAcademicFreeLicenseV11 reads file data from disk. It returns an error on failure.
func confLicenseAcademicFreeLicenseV11() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Academic Free License v1.1"
	name := "conf/license/Academic Free License v1.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAcademicFreeLicenseV12 reads file data from disk. It returns an error on failure.
func confLicenseAcademicFreeLicenseV12() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Academic Free License v1.2"
	name := "conf/license/Academic Free License v1.2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAcademicFreeLicenseV20 reads file data from disk. It returns an error on failure.
func confLicenseAcademicFreeLicenseV20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Academic Free License v2.0"
	name := "conf/license/Academic Free License v2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAcademicFreeLicenseV21 reads file data from disk. It returns an error on failure.
func confLicenseAcademicFreeLicenseV21() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Academic Free License v2.1"
	name := "conf/license/Academic Free License v2.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAcademicFreeLicenseV30 reads file data from disk. It returns an error on failure.
func confLicenseAcademicFreeLicenseV30() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Academic Free License v3.0"
	name := "conf/license/Academic Free License v3.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseAfferoGeneralPublicLicenseV10 reads file data from disk. It returns an error on failure.
func confLicenseAfferoGeneralPublicLicenseV10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Affero General Public License v1.0"
	name := "conf/license/Affero General Public License v1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseApacheLicense10 reads file data from disk. It returns an error on failure.
func confLicenseApacheLicense10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Apache License 1.0"
	name := "conf/license/Apache License 1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseApacheLicense11 reads file data from disk. It returns an error on failure.
func confLicenseApacheLicense11() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Apache License 1.1"
	name := "conf/license/Apache License 1.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseApacheLicense20 reads file data from disk. It returns an error on failure.
func confLicenseApacheLicense20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Apache License 2.0"
	name := "conf/license/Apache License 2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseArtisticLicense10 reads file data from disk. It returns an error on failure.
func confLicenseArtisticLicense10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Artistic License 1.0"
	name := "conf/license/Artistic License 1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseArtisticLicense20 reads file data from disk. It returns an error on failure.
func confLicenseArtisticLicense20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Artistic License 2.0"
	name := "conf/license/Artistic License 2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseBsd2ClauseLicense reads file data from disk. It returns an error on failure.
func confLicenseBsd2ClauseLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/BSD 2-clause License"
	name := "conf/license/BSD 2-clause License"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseBsd3ClauseLicense reads file data from disk. It returns an error on failure.
func confLicenseBsd3ClauseLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/BSD 3-clause License"
	name := "conf/license/BSD 3-clause License"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseBsd4ClauseLicense reads file data from disk. It returns an error on failure.
func confLicenseBsd4ClauseLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/BSD 4-clause License"
	name := "conf/license/BSD 4-clause License"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseCreativeCommonsCc010Universal reads file data from disk. It returns an error on failure.
func confLicenseCreativeCommonsCc010Universal() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Creative Commons CC0 1.0 Universal"
	name := "conf/license/Creative Commons CC0 1.0 Universal"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseEclipsePublicLicense10 reads file data from disk. It returns an error on failure.
func confLicenseEclipsePublicLicense10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Eclipse Public License 1.0"
	name := "conf/license/Eclipse Public License 1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseEducationalCommunityLicenseV10 reads file data from disk. It returns an error on failure.
func confLicenseEducationalCommunityLicenseV10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Educational Community License v1.0"
	name := "conf/license/Educational Community License v1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseEducationalCommunityLicenseV20 reads file data from disk. It returns an error on failure.
func confLicenseEducationalCommunityLicenseV20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Educational Community License v2.0"
	name := "conf/license/Educational Community License v2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuAfferoGeneralPublicLicenseV30 reads file data from disk. It returns an error on failure.
func confLicenseGnuAfferoGeneralPublicLicenseV30() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Affero General Public License v3.0"
	name := "conf/license/GNU Affero General Public License v3.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuFreeDocumentationLicenseV11 reads file data from disk. It returns an error on failure.
func confLicenseGnuFreeDocumentationLicenseV11() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Free Documentation License v1.1"
	name := "conf/license/GNU Free Documentation License v1.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuFreeDocumentationLicenseV12 reads file data from disk. It returns an error on failure.
func confLicenseGnuFreeDocumentationLicenseV12() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Free Documentation License v1.2"
	name := "conf/license/GNU Free Documentation License v1.2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuFreeDocumentationLicenseV13 reads file data from disk. It returns an error on failure.
func confLicenseGnuFreeDocumentationLicenseV13() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Free Documentation License v1.3"
	name := "conf/license/GNU Free Documentation License v1.3"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuGeneralPublicLicenseV10 reads file data from disk. It returns an error on failure.
func confLicenseGnuGeneralPublicLicenseV10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU General Public License v1.0"
	name := "conf/license/GNU General Public License v1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuGeneralPublicLicenseV20 reads file data from disk. It returns an error on failure.
func confLicenseGnuGeneralPublicLicenseV20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU General Public License v2.0"
	name := "conf/license/GNU General Public License v2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuGeneralPublicLicenseV30 reads file data from disk. It returns an error on failure.
func confLicenseGnuGeneralPublicLicenseV30() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU General Public License v3.0"
	name := "conf/license/GNU General Public License v3.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuLesserGeneralPublicLicenseV21 reads file data from disk. It returns an error on failure.
func confLicenseGnuLesserGeneralPublicLicenseV21() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Lesser General Public License v2.1"
	name := "conf/license/GNU Lesser General Public License v2.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuLesserGeneralPublicLicenseV30 reads file data from disk. It returns an error on failure.
func confLicenseGnuLesserGeneralPublicLicenseV30() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Lesser General Public License v3.0"
	name := "conf/license/GNU Lesser General Public License v3.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseGnuLibraryGeneralPublicLicenseV20 reads file data from disk. It returns an error on failure.
func confLicenseGnuLibraryGeneralPublicLicenseV20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/GNU Library General Public License v2.0"
	name := "conf/license/GNU Library General Public License v2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseIscLicense reads file data from disk. It returns an error on failure.
func confLicenseIscLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/ISC license"
	name := "conf/license/ISC license"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseMitLicense reads file data from disk. It returns an error on failure.
func confLicenseMitLicense() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/MIT License"
	name := "conf/license/MIT License"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseMozillaPublicLicense10 reads file data from disk. It returns an error on failure.
func confLicenseMozillaPublicLicense10() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Mozilla Public License 1.0"
	name := "conf/license/Mozilla Public License 1.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseMozillaPublicLicense11 reads file data from disk. It returns an error on failure.
func confLicenseMozillaPublicLicense11() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Mozilla Public License 1.1"
	name := "conf/license/Mozilla Public License 1.1"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLicenseMozillaPublicLicense20 reads file data from disk. It returns an error on failure.
func confLicenseMozillaPublicLicense20() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/license/Mozilla Public License 2.0"
	name := "conf/license/Mozilla Public License 2.0"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_bgBgIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_bgBgIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_bg-BG.ini"
	name := "conf/locale/locale_bg-BG.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_csCzIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_csCzIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_cs-CZ.ini"
	name := "conf/locale/locale_cs-CZ.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_deDeIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_deDeIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_de-DE.ini"
	name := "conf/locale/locale_de-DE.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_enGbIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_enGbIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_en-GB.ini"
	name := "conf/locale/locale_en-GB.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_enUsIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_enUsIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_en-US.ini"
	name := "conf/locale/locale_en-US.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_esEsIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_esEsIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_es-ES.ini"
	name := "conf/locale/locale_es-ES.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_fiFiIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_fiFiIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_fi-FI.ini"
	name := "conf/locale/locale_fi-FI.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_frFrIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_frFrIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_fr-FR.ini"
	name := "conf/locale/locale_fr-FR.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_glEsIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_glEsIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_gl-ES.ini"
	name := "conf/locale/locale_gl-ES.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_huHuIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_huHuIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_hu-HU.ini"
	name := "conf/locale/locale_hu-HU.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_itItIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_itItIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_it-IT.ini"
	name := "conf/locale/locale_it-IT.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_jaJpIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_jaJpIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_ja-JP.ini"
	name := "conf/locale/locale_ja-JP.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_koKrIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_koKrIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_ko-KR.ini"
	name := "conf/locale/locale_ko-KR.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_lvLvIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_lvLvIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_lv-LV.ini"
	name := "conf/locale/locale_lv-LV.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_nlNlIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_nlNlIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_nl-NL.ini"
	name := "conf/locale/locale_nl-NL.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_plPlIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_plPlIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_pl-PL.ini"
	name := "conf/locale/locale_pl-PL.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_ptBrIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_ptBrIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_pt-BR.ini"
	name := "conf/locale/locale_pt-BR.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_ruRuIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_ruRuIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_ru-RU.ini"
	name := "conf/locale/locale_ru-RU.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_srSpIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_srSpIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_sr-SP.ini"
	name := "conf/locale/locale_sr-SP.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_svSeIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_svSeIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_sv-SE.ini"
	name := "conf/locale/locale_sv-SE.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_trTrIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_trTrIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_tr-TR.ini"
	name := "conf/locale/locale_tr-TR.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_ukUaIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_ukUaIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_uk-UA.ini"
	name := "conf/locale/locale_uk-UA.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_zhCnIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_zhCnIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_zh-CN.ini"
	name := "conf/locale/locale_zh-CN.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_zhHkIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_zhHkIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_zh-HK.ini"
	name := "conf/locale/locale_zh-HK.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confLocaleLocale_zhTwIni reads file data from disk. It returns an error on failure.
func confLocaleLocale_zhTwIni() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/locale/locale_zh-TW.ini"
	name := "conf/locale/locale_zh-TW.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// confReadmeDefault reads file data from disk. It returns an error on failure.
func confReadmeDefault() (*asset, error) {
	path := "/Workspace/Workshop/go/src/github.com/gogits/gogs/conf/readme/Default"
	name := "conf/readme/Default"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/gitignore/Actionscript": confGitignoreActionscript,
	"conf/gitignore/Ada": confGitignoreAda,
	"conf/gitignore/Agda": confGitignoreAgda,
	"conf/gitignore/Android": confGitignoreAndroid,
	"conf/gitignore/Anjuta": confGitignoreAnjuta,
	"conf/gitignore/AppEngine": confGitignoreAppengine,
	"conf/gitignore/AppceleratorTitanium": confGitignoreAppceleratortitanium,
	"conf/gitignore/ArchLinuxPackages": confGitignoreArchlinuxpackages,
	"conf/gitignore/Archives": confGitignoreArchives,
	"conf/gitignore/Autotools": confGitignoreAutotools,
	"conf/gitignore/BricxCC": confGitignoreBricxcc,
	"conf/gitignore/C": confGitignoreC,
	"conf/gitignore/C Sharp": confGitignoreCSharp,
	"conf/gitignore/C++": confGitignoreC2,
	"conf/gitignore/CFWheels": confGitignoreCfwheels,
	"conf/gitignore/CMake": confGitignoreCmake,
	"conf/gitignore/CUDA": confGitignoreCuda,
	"conf/gitignore/CVS": confGitignoreCvs,
	"conf/gitignore/CakePHP": confGitignoreCakephp,
	"conf/gitignore/ChefCookbook": confGitignoreChefcookbook,
	"conf/gitignore/Cloud9": confGitignoreCloud9,
	"conf/gitignore/CodeIgniter": confGitignoreCodeigniter,
	"conf/gitignore/CodeKit": confGitignoreCodekit,
	"conf/gitignore/CommonLisp": confGitignoreCommonlisp,
	"conf/gitignore/Composer": confGitignoreComposer,
	"conf/gitignore/Concrete5": confGitignoreConcrete5,
	"conf/gitignore/Coq": confGitignoreCoq,
	"conf/gitignore/CraftCMS": confGitignoreCraftcms,
	"conf/gitignore/DM": confGitignoreDm,
	"conf/gitignore/Dart": confGitignoreDart,
	"conf/gitignore/DartEditor": confGitignoreDarteditor,
	"conf/gitignore/Delphi": confGitignoreDelphi,
	"conf/gitignore/Dreamweaver": confGitignoreDreamweaver,
	"conf/gitignore/Drupal": confGitignoreDrupal,
	"conf/gitignore/EPiServer": confGitignoreEpiserver,
	"conf/gitignore/Eagle": confGitignoreEagle,
	"conf/gitignore/Eclipse": confGitignoreEclipse,
	"conf/gitignore/EiffelStudio": confGitignoreEiffelstudio,
	"conf/gitignore/Elisp": confGitignoreElisp,
	"conf/gitignore/Elixir": confGitignoreElixir,
	"conf/gitignore/Emacs": confGitignoreEmacs,
	"conf/gitignore/Ensime": confGitignoreEnsime,
	"conf/gitignore/Erlang": confGitignoreErlang,
	"conf/gitignore/Espresso": confGitignoreEspresso,
	"conf/gitignore/ExpressionEngine": confGitignoreExpressionengine,
	"conf/gitignore/ExtJs": confGitignoreExtjs,
	"conf/gitignore/Fancy": confGitignoreFancy,
	"conf/gitignore/Finale": confGitignoreFinale,
	"conf/gitignore/FlexBuilder": confGitignoreFlexbuilder,
	"conf/gitignore/ForceDotCom": confGitignoreForcedotcom,
	"conf/gitignore/FuelPHP": confGitignoreFuelphp,
	"conf/gitignore/GWT": confGitignoreGwt,
	"conf/gitignore/Gcov": confGitignoreGcov,
	"conf/gitignore/GitBook": confGitignoreGitbook,
	"conf/gitignore/Go": confGitignoreGo,
	"conf/gitignore/Gradle": confGitignoreGradle,
	"conf/gitignore/Grails": confGitignoreGrails,
	"conf/gitignore/Haskell": confGitignoreHaskell,
	"conf/gitignore/IGORPro": confGitignoreIgorpro,
	"conf/gitignore/IPythonNotebook": confGitignoreIpythonnotebook,
	"conf/gitignore/Idris": confGitignoreIdris,
	"conf/gitignore/JDeveloper": confGitignoreJdeveloper,
	"conf/gitignore/Java": confGitignoreJava,
	"conf/gitignore/Jboss": confGitignoreJboss,
	"conf/gitignore/Jekyll": confGitignoreJekyll,
	"conf/gitignore/JetBrains": confGitignoreJetbrains,
	"conf/gitignore/Joomla": confGitignoreJoomla,
	"conf/gitignore/KDevelop4": confGitignoreKdevelop4,
	"conf/gitignore/Kate": confGitignoreKate,
	"conf/gitignore/KiCAD": confGitignoreKicad,
	"conf/gitignore/Kohana": confGitignoreKohana,
	"conf/gitignore/LabVIEW": confGitignoreLabview,
	"conf/gitignore/Laravel": confGitignoreLaravel,
	"conf/gitignore/Lazarus": confGitignoreLazarus,
	"conf/gitignore/Leiningen": confGitignoreLeiningen,
	"conf/gitignore/LemonStand": confGitignoreLemonstand,
	"conf/gitignore/LibreOffice": confGitignoreLibreoffice,
	"conf/gitignore/Lilypond": confGitignoreLilypond,
	"conf/gitignore/Linux": confGitignoreLinux,
	"conf/gitignore/Lithium": confGitignoreLithium,
	"conf/gitignore/Lua": confGitignoreLua,
	"conf/gitignore/LyX": confGitignoreLyx,
	"conf/gitignore/Magento": confGitignoreMagento,
	"conf/gitignore/Matlab": confGitignoreMatlab,
	"conf/gitignore/Maven": confGitignoreMaven,
	"conf/gitignore/Mercurial": confGitignoreMercurial,
	"conf/gitignore/Mercury": confGitignoreMercury,
	"conf/gitignore/MetaProgrammingSystem": confGitignoreMetaprogrammingsystem,
	"conf/gitignore/MicrosoftOffice": confGitignoreMicrosoftoffice,
	"conf/gitignore/ModelSim": confGitignoreModelsim,
	"conf/gitignore/Momentics": confGitignoreMomentics,
	"conf/gitignore/MonoDevelop": confGitignoreMonodevelop,
	"conf/gitignore/Nanoc": confGitignoreNanoc,
	"conf/gitignore/NetBeans": confGitignoreNetbeans,
	"conf/gitignore/Nim": confGitignoreNim,
	"conf/gitignore/Ninja": confGitignoreNinja,
	"conf/gitignore/Node": confGitignoreNode,
	"conf/gitignore/NotepadPP": confGitignoreNotepadpp,
	"conf/gitignore/OCaml": confGitignoreOcaml,
	"conf/gitignore/Objective-C": confGitignoreObjectiveC,
	"conf/gitignore/Opa": confGitignoreOpa,
	"conf/gitignore/OpenCart": confGitignoreOpencart,
	"conf/gitignore/OracleForms": confGitignoreOracleforms,
	"conf/gitignore/Packer": confGitignorePacker,
	"conf/gitignore/Perl": confGitignorePerl,
	"conf/gitignore/Phalcon": confGitignorePhalcon,
	"conf/gitignore/PlayFramework": confGitignorePlayframework,
	"conf/gitignore/Plone": confGitignorePlone,
	"conf/gitignore/Prestashop": confGitignorePrestashop,
	"conf/gitignore/Processing": confGitignoreProcessing,
	"conf/gitignore/Python": confGitignorePython,
	"conf/gitignore/Qooxdoo": confGitignoreQooxdoo,
	"conf/gitignore/Qt": confGitignoreQt,
	"conf/gitignore/R": confGitignoreR,
	"conf/gitignore/ROS": confGitignoreRos,
	"conf/gitignore/Rails": confGitignoreRails,
	"conf/gitignore/Redcar": confGitignoreRedcar,
	"conf/gitignore/Redis": confGitignoreRedis,
	"conf/gitignore/RhodesRhomobile": confGitignoreRhodesrhomobile,
	"conf/gitignore/Ruby": confGitignoreRuby,
	"conf/gitignore/Rust": confGitignoreRust,
	"conf/gitignore/SBT": confGitignoreSbt,
	"conf/gitignore/SCons": confGitignoreScons,
	"conf/gitignore/SVN": confGitignoreSvn,
	"conf/gitignore/Sass": confGitignoreSass,
	"conf/gitignore/Scala": confGitignoreScala,
	"conf/gitignore/Scrivener": confGitignoreScrivener,
	"conf/gitignore/Sdcc": confGitignoreSdcc,
	"conf/gitignore/SeamGen": confGitignoreSeamgen,
	"conf/gitignore/SketchUp": confGitignoreSketchup,
	"conf/gitignore/SlickEdit": confGitignoreSlickedit,
	"conf/gitignore/Stella": confGitignoreStella,
	"conf/gitignore/SublimeText": confGitignoreSublimetext,
	"conf/gitignore/SugarCRM": confGitignoreSugarcrm,
	"conf/gitignore/Swift": confGitignoreSwift,
	"conf/gitignore/Symfony": confGitignoreSymfony,
	"conf/gitignore/SymphonyCMS": confGitignoreSymphonycms,
	"conf/gitignore/SynopsysVCS": confGitignoreSynopsysvcs,
	"conf/gitignore/Tags": confGitignoreTags,
	"conf/gitignore/TeX": confGitignoreTex,
	"conf/gitignore/TextMate": confGitignoreTextmate,
	"conf/gitignore/Textpattern": confGitignoreTextpattern,
	"conf/gitignore/TortoiseGit": confGitignoreTortoisegit,
	"conf/gitignore/TurboGears2": confGitignoreTurbogears2,
	"conf/gitignore/Typo3": confGitignoreTypo3,
	"conf/gitignore/Umbraco": confGitignoreUmbraco,
	"conf/gitignore/Unity": confGitignoreUnity,
	"conf/gitignore/VVVV": confGitignoreVvvv,
	"conf/gitignore/Vagrant": confGitignoreVagrant,
	"conf/gitignore/Vim": confGitignoreVim,
	"conf/gitignore/VirtualEnv": confGitignoreVirtualenv,
	"conf/gitignore/VisualStudio": confGitignoreVisualstudio,
	"conf/gitignore/VisualStudioCode": confGitignoreVisualstudiocode,
	"conf/gitignore/Waf": confGitignoreWaf,
	"conf/gitignore/WebMethods": confGitignoreWebmethods,
	"conf/gitignore/Windows": confGitignoreWindows,
	"conf/gitignore/WordPress": confGitignoreWordpress,
	"conf/gitignore/Xcode": confGitignoreXcode,
	"conf/gitignore/XilinxISE": confGitignoreXilinxise,
	"conf/gitignore/Xojo": confGitignoreXojo,
	"conf/gitignore/Yeoman": confGitignoreYeoman,
	"conf/gitignore/Yii": confGitignoreYii,
	"conf/gitignore/ZendFramework": confGitignoreZendframework,
	"conf/gitignore/Zephir": confGitignoreZephir,
	"conf/gitignore/macOS": confGitignoreMacos,
	"conf/label/Default": confLabelDefault,
	"conf/license/Abstyles License": confLicenseAbstylesLicense,
	"conf/license/Academic Free License v1.1": confLicenseAcademicFreeLicenseV11,
	"conf/license/Academic Free License v1.2": confLicenseAcademicFreeLicenseV12,
	"conf/license/Academic Free License v2.0": confLicenseAcademicFreeLicenseV20,
	"conf/license/Academic Free License v2.1": confLicenseAcademicFreeLicenseV21,
	"conf/license/Academic Free License v3.0": confLicenseAcademicFreeLicenseV30,
	"conf/license/Affero General Public License v1.0": confLicenseAfferoGeneralPublicLicenseV10,
	"conf/license/Apache License 1.0": confLicenseApacheLicense10,
	"conf/license/Apache License 1.1": confLicenseApacheLicense11,
	"conf/license/Apache License 2.0": confLicenseApacheLicense20,
	"conf/license/Artistic License 1.0": confLicenseArtisticLicense10,
	"conf/license/Artistic License 2.0": confLicenseArtisticLicense20,
	"conf/license/BSD 2-clause License": confLicenseBsd2ClauseLicense,
	"conf/license/BSD 3-clause License": confLicenseBsd3ClauseLicense,
	"conf/license/BSD 4-clause License": confLicenseBsd4ClauseLicense,
	"conf/license/Creative Commons CC0 1.0 Universal": confLicenseCreativeCommonsCc010Universal,
	"conf/license/Eclipse Public License 1.0": confLicenseEclipsePublicLicense10,
	"conf/license/Educational Community License v1.0": confLicenseEducationalCommunityLicenseV10,
	"conf/license/Educational Community License v2.0": confLicenseEducationalCommunityLicenseV20,
	"conf/license/GNU Affero General Public License v3.0": confLicenseGnuAfferoGeneralPublicLicenseV30,
	"conf/license/GNU Free Documentation License v1.1": confLicenseGnuFreeDocumentationLicenseV11,
	"conf/license/GNU Free Documentation License v1.2": confLicenseGnuFreeDocumentationLicenseV12,
	"conf/license/GNU Free Documentation License v1.3": confLicenseGnuFreeDocumentationLicenseV13,
	"conf/license/GNU General Public License v1.0": confLicenseGnuGeneralPublicLicenseV10,
	"conf/license/GNU General Public License v2.0": confLicenseGnuGeneralPublicLicenseV20,
	"conf/license/GNU General Public License v3.0": confLicenseGnuGeneralPublicLicenseV30,
	"conf/license/GNU Lesser General Public License v2.1": confLicenseGnuLesserGeneralPublicLicenseV21,
	"conf/license/GNU Lesser General Public License v3.0": confLicenseGnuLesserGeneralPublicLicenseV30,
	"conf/license/GNU Library General Public License v2.0": confLicenseGnuLibraryGeneralPublicLicenseV20,
	"conf/license/ISC license": confLicenseIscLicense,
	"conf/license/MIT License": confLicenseMitLicense,
	"conf/license/Mozilla Public License 1.0": confLicenseMozillaPublicLicense10,
	"conf/license/Mozilla Public License 1.1": confLicenseMozillaPublicLicense11,
	"conf/license/Mozilla Public License 2.0": confLicenseMozillaPublicLicense20,
	"conf/locale/locale_bg-BG.ini": confLocaleLocale_bgBgIni,
	"conf/locale/locale_cs-CZ.ini": confLocaleLocale_csCzIni,
	"conf/locale/locale_de-DE.ini": confLocaleLocale_deDeIni,
	"conf/locale/locale_en-GB.ini": confLocaleLocale_enGbIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_es-ES.ini": confLocaleLocale_esEsIni,
	"conf/locale/locale_fi-FI.ini": confLocaleLocale_fiFiIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
	"conf/locale/locale_gl-ES.ini": confLocaleLocale_glEsIni,
	"conf/locale/locale_hu-HU.ini": confLocaleLocale_huHuIni,
	"conf/locale/locale_it-IT.ini": confLocaleLocale_itItIni,
	"conf/locale/locale_ja-JP.ini": confLocaleLocale_jaJpIni,
	"conf/locale/locale_ko-KR.ini": confLocaleLocale_koKrIni,
	"conf/locale/locale_lv-LV.ini": confLocaleLocale_lvLvIni,
	"conf/locale/locale_nl-NL.ini": confLocaleLocale_nlNlIni,
	"conf/locale/locale_pl-PL.ini": confLocaleLocale_plPlIni,
	"conf/locale/locale_pt-BR.ini": confLocaleLocale_ptBrIni,
	"conf/locale/locale_ru-RU.ini": confLocaleLocale_ruRuIni,
	"conf/locale/locale_sr-SP.ini": confLocaleLocale_srSpIni,
	"conf/locale/locale_sv-SE.ini": confLocaleLocale_svSeIni,
	"conf/locale/locale_tr-TR.ini": confLocaleLocale_trTrIni,
	"conf/locale/locale_uk-UA.ini": confLocaleLocale_ukUaIni,
	"conf/locale/locale_zh-CN.ini": confLocaleLocale_zhCnIni,
	"conf/locale/locale_zh-HK.ini": confLocaleLocale_zhHkIni,
	"conf/locale/locale_zh-TW.ini": confLocaleLocale_zhTwIni,
	"conf/readme/Default": confReadmeDefault,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"gitignore": &bintree{nil, map[string]*bintree{
			"Actionscript": &bintree{confGitignoreActionscript, map[string]*bintree{}},
			"Ada": &bintree{confGitignoreAda, map[string]*bintree{}},
			"Agda": &bintree{confGitignoreAgda, map[string]*bintree{}},
			"Android": &bintree{confGitignoreAndroid, map[string]*bintree{}},
			"Anjuta": &bintree{confGitignoreAnjuta, map[string]*bintree{}},
			"AppEngine": &bintree{confGitignoreAppengine, map[string]*bintree{}},
			"AppceleratorTitanium": &bintree{confGitignoreAppceleratortitanium, map[string]*bintree{}},
			"ArchLinuxPackages": &bintree{confGitignoreArchlinuxpackages, map[string]*bintree{}},
			"Archives": &bintree{confGitignoreArchives, map[string]*bintree{}},
			"Autotools": &bintree{confGitignoreAutotools, map[string]*bintree{}},
			"BricxCC": &bintree{confGitignoreBricxcc, map[string]*bintree{}},
			"C": &bintree{confGitignoreC, map[string]*bintree{}},
			"C Sharp": &bintree{confGitignoreCSharp, map[string]*bintree{}},
			"C++": &bintree{confGitignoreC2, map[string]*bintree{}},
			"CFWheels": &bintree{confGitignoreCfwheels, map[string]*bintree{}},
			"CMake": &bintree{confGitignoreCmake, map[string]*bintree{}},
			"CUDA": &bintree{confGitignoreCuda, map[string]*bintree{}},
			"CVS": &bintree{confGitignoreCvs, map[string]*bintree{}},
			"CakePHP": &bintree{confGitignoreCakephp, map[string]*bintree{}},
			"ChefCookbook": &bintree{confGitignoreChefcookbook, map[string]*bintree{}},
			"Cloud9": &bintree{confGitignoreCloud9, map[string]*bintree{}},
			"CodeIgniter": &bintree{confGitignoreCodeigniter, map[string]*bintree{}},
			"CodeKit": &bintree{confGitignoreCodekit, map[string]*bintree{}},
			"CommonLisp": &bintree{confGitignoreCommonlisp, map[string]*bintree{}},
			"Composer": &bintree{confGitignoreComposer, map[string]*bintree{}},
			"Concrete5": &bintree{confGitignoreConcrete5, map[string]*bintree{}},
			"Coq": &bintree{confGitignoreCoq, map[string]*bintree{}},
			"CraftCMS": &bintree{confGitignoreCraftcms, map[string]*bintree{}},
			"DM": &bintree{confGitignoreDm, map[string]*bintree{}},
			"Dart": &bintree{confGitignoreDart, map[string]*bintree{}},
			"DartEditor": &bintree{confGitignoreDarteditor, map[string]*bintree{}},
			"Delphi": &bintree{confGitignoreDelphi, map[string]*bintree{}},
			"Dreamweaver": &bintree{confGitignoreDreamweaver, map[string]*bintree{}},
			"Drupal": &bintree{confGitignoreDrupal, map[string]*bintree{}},
			"EPiServer": &bintree{confGitignoreEpiserver, map[string]*bintree{}},
			"Eagle": &bintree{confGitignoreEagle, map[string]*bintree{}},
			"Eclipse": &bintree{confGitignoreEclipse, map[string]*bintree{}},
			"EiffelStudio": &bintree{confGitignoreEiffelstudio, map[string]*bintree{}},
			"Elisp": &bintree{confGitignoreElisp, map[string]*bintree{}},
			"Elixir": &bintree{confGitignoreElixir, map[string]*bintree{}},
			"Emacs": &bintree{confGitignoreEmacs, map[string]*bintree{}},
			"Ensime": &bintree{confGitignoreEnsime, map[string]*bintree{}},
			"Erlang": &bintree{confGitignoreErlang, map[string]*bintree{}},
			"Espresso": &bintree{confGitignoreEspresso, map[string]*bintree{}},
			"ExpressionEngine": &bintree{confGitignoreExpressionengine, map[string]*bintree{}},
			"ExtJs": &bintree{confGitignoreExtjs, map[string]*bintree{}},
			"Fancy": &bintree{confGitignoreFancy, map[string]*bintree{}},
			"Finale": &bintree{confGitignoreFinale, map[string]*bintree{}},
			"FlexBuilder": &bintree{confGitignoreFlexbuilder, map[string]*bintree{}},
			"ForceDotCom": &bintree{confGitignoreForcedotcom, map[string]*bintree{}},
			"FuelPHP": &bintree{confGitignoreFuelphp, map[string]*bintree{}},
			"GWT": &bintree{confGitignoreGwt, map[string]*bintree{}},
			"Gcov": &bintree{confGitignoreGcov, map[string]*bintree{}},
			"GitBook": &bintree{confGitignoreGitbook, map[string]*bintree{}},
			"Go": &bintree{confGitignoreGo, map[string]*bintree{}},
			"Gradle": &bintree{confGitignoreGradle, map[string]*bintree{}},
			"Grails": &bintree{confGitignoreGrails, map[string]*bintree{}},
			"Haskell": &bintree{confGitignoreHaskell, map[string]*bintree{}},
			"IGORPro": &bintree{confGitignoreIgorpro, map[string]*bintree{}},
			"IPythonNotebook": &bintree{confGitignoreIpythonnotebook, map[string]*bintree{}},
			"Idris": &bintree{confGitignoreIdris, map[string]*bintree{}},
			"JDeveloper": &bintree{confGitignoreJdeveloper, map[string]*bintree{}},
			"Java": &bintree{confGitignoreJava, map[string]*bintree{}},
			"Jboss": &bintree{confGitignoreJboss, map[string]*bintree{}},
			"Jekyll": &bintree{confGitignoreJekyll, map[string]*bintree{}},
			"JetBrains": &bintree{confGitignoreJetbrains, map[string]*bintree{}},
			"Joomla": &bintree{confGitignoreJoomla, map[string]*bintree{}},
			"KDevelop4": &bintree{confGitignoreKdevelop4, map[string]*bintree{}},
			"Kate": &bintree{confGitignoreKate, map[string]*bintree{}},
			"KiCAD": &bintree{confGitignoreKicad, map[string]*bintree{}},
			"Kohana": &bintree{confGitignoreKohana, map[string]*bintree{}},
			"LabVIEW": &bintree{confGitignoreLabview, map[string]*bintree{}},
			"Laravel": &bintree{confGitignoreLaravel, map[string]*bintree{}},
			"Lazarus": &bintree{confGitignoreLazarus, map[string]*bintree{}},
			"Leiningen": &bintree{confGitignoreLeiningen, map[string]*bintree{}},
			"LemonStand": &bintree{confGitignoreLemonstand, map[string]*bintree{}},
			"LibreOffice": &bintree{confGitignoreLibreoffice, map[string]*bintree{}},
			"Lilypond": &bintree{confGitignoreLilypond, map[string]*bintree{}},
			"Linux": &bintree{confGitignoreLinux, map[string]*bintree{}},
			"Lithium": &bintree{confGitignoreLithium, map[string]*bintree{}},
			"Lua": &bintree{confGitignoreLua, map[string]*bintree{}},
			"LyX": &bintree{confGitignoreLyx, map[string]*bintree{}},
			"Magento": &bintree{confGitignoreMagento, map[string]*bintree{}},
			"Matlab": &bintree{confGitignoreMatlab, map[string]*bintree{}},
			"Maven": &bintree{confGitignoreMaven, map[string]*bintree{}},
			"Mercurial": &bintree{confGitignoreMercurial, map[string]*bintree{}},
			"Mercury": &bintree{confGitignoreMercury, map[string]*bintree{}},
			"MetaProgrammingSystem": &bintree{confGitignoreMetaprogrammingsystem, map[string]*bintree{}},
			"MicrosoftOffice": &bintree{confGitignoreMicrosoftoffice, map[string]*bintree{}},
			"ModelSim": &bintree{confGitignoreModelsim, map[string]*bintree{}},
			"Momentics": &bintree{confGitignoreMomentics, map[string]*bintree{}},
			"MonoDevelop": &bintree{confGitignoreMonodevelop, map[string]*bintree{}},
			"Nanoc": &bintree{confGitignoreNanoc, map[string]*bintree{}},
			"NetBeans": &bintree{confGitignoreNetbeans, map[string]*bintree{}},
			"Nim": &bintree{confGitignoreNim, map[string]*bintree{}},
			"Ninja": &bintree{confGitignoreNinja, map[string]*bintree{}},
			"Node": &bintree{confGitignoreNode, map[string]*bintree{}},
			"NotepadPP": &bintree{confGitignoreNotepadpp, map[string]*bintree{}},
			"OCaml": &bintree{confGitignoreOcaml, map[string]*bintree{}},
			"Objective-C": &bintree{confGitignoreObjectiveC, map[string]*bintree{}},
			"Opa": &bintree{confGitignoreOpa, map[string]*bintree{}},
			"OpenCart": &bintree{confGitignoreOpencart, map[string]*bintree{}},
			"OracleForms": &bintree{confGitignoreOracleforms, map[string]*bintree{}},
			"Packer": &bintree{confGitignorePacker, map[string]*bintree{}},
			"Perl": &bintree{confGitignorePerl, map[string]*bintree{}},
			"Phalcon": &bintree{confGitignorePhalcon, map[string]*bintree{}},
			"PlayFramework": &bintree{confGitignorePlayframework, map[string]*bintree{}},
			"Plone": &bintree{confGitignorePlone, map[string]*bintree{}},
			"Prestashop": &bintree{confGitignorePrestashop, map[string]*bintree{}},
			"Processing": &bintree{confGitignoreProcessing, map[string]*bintree{}},
			"Python": &bintree{confGitignorePython, map[string]*bintree{}},
			"Qooxdoo": &bintree{confGitignoreQooxdoo, map[string]*bintree{}},
			"Qt": &bintree{confGitignoreQt, map[string]*bintree{}},
			"R": &bintree{confGitignoreR, map[string]*bintree{}},
			"ROS": &bintree{confGitignoreRos, map[string]*bintree{}},
			"Rails": &bintree{confGitignoreRails, map[string]*bintree{}},
			"Redcar": &bintree{confGitignoreRedcar, map[string]*bintree{}},
			"Redis": &bintree{confGitignoreRedis, map[string]*bintree{}},
			"RhodesRhomobile": &bintree{confGitignoreRhodesrhomobile, map[string]*bintree{}},
			"Ruby": &bintree{confGitignoreRuby, map[string]*bintree{}},
			"Rust": &bintree{confGitignoreRust, map[string]*bintree{}},
			"SBT": &bintree{confGitignoreSbt, map[string]*bintree{}},
			"SCons": &bintree{confGitignoreScons, map[string]*bintree{}},
			"SVN": &bintree{confGitignoreSvn, map[string]*bintree{}},
			"Sass": &bintree{confGitignoreSass, map[string]*bintree{}},
			"Scala": &bintree{confGitignoreScala, map[string]*bintree{}},
			"Scrivener": &bintree{confGitignoreScrivener, map[string]*bintree{}},
			"Sdcc": &bintree{confGitignoreSdcc, map[string]*bintree{}},
			"SeamGen": &bintree{confGitignoreSeamgen, map[string]*bintree{}},
			"SketchUp": &bintree{confGitignoreSketchup, map[string]*bintree{}},
			"SlickEdit": &bintree{confGitignoreSlickedit, map[string]*bintree{}},
			"Stella": &bintree{confGitignoreStella, map[string]*bintree{}},
			"SublimeText": &bintree{confGitignoreSublimetext, map[string]*bintree{}},
			"SugarCRM": &bintree{confGitignoreSugarcrm, map[string]*bintree{}},
			"Swift": &bintree{confGitignoreSwift, map[string]*bintree{}},
			"Symfony": &bintree{confGitignoreSymfony, map[string]*bintree{}},
			"SymphonyCMS": &bintree{confGitignoreSymphonycms, map[string]*bintree{}},
			"SynopsysVCS": &bintree{confGitignoreSynopsysvcs, map[string]*bintree{}},
			"Tags": &bintree{confGitignoreTags, map[string]*bintree{}},
			"TeX": &bintree{confGitignoreTex, map[string]*bintree{}},
			"TextMate": &bintree{confGitignoreTextmate, map[string]*bintree{}},
			"Textpattern": &bintree{confGitignoreTextpattern, map[string]*bintree{}},
			"TortoiseGit": &bintree{confGitignoreTortoisegit, map[string]*bintree{}},
			"TurboGears2": &bintree{confGitignoreTurbogears2, map[string]*bintree{}},
			"Typo3": &bintree{confGitignoreTypo3, map[string]*bintree{}},
			"Umbraco": &bintree{confGitignoreUmbraco, map[string]*bintree{}},
			"Unity": &bintree{confGitignoreUnity, map[string]*bintree{}},
			"VVVV": &bintree{confGitignoreVvvv, map[string]*bintree{}},
			"Vagrant": &bintree{confGitignoreVagrant, map[string]*bintree{}},
			"Vim": &bintree{confGitignoreVim, map[string]*bintree{}},
			"VirtualEnv": &bintree{confGitignoreVirtualenv, map[string]*bintree{}},
			"VisualStudio": &bintree{confGitignoreVisualstudio, map[string]*bintree{}},
			"VisualStudioCode": &bintree{confGitignoreVisualstudiocode, map[string]*bintree{}},
			"Waf": &bintree{confGitignoreWaf, map[string]*bintree{}},
			"WebMethods": &bintree{confGitignoreWebmethods, map[string]*bintree{}},
			"Windows": &bintree{confGitignoreWindows, map[string]*bintree{}},
			"WordPress": &bintree{confGitignoreWordpress, map[string]*bintree{}},
			"Xcode": &bintree{confGitignoreXcode, map[string]*bintree{}},
			"XilinxISE": &bintree{confGitignoreXilinxise, map[string]*bintree{}},
			"Xojo": &bintree{confGitignoreXojo, map[string]*bintree{}},
			"Yeoman": &bintree{confGitignoreYeoman, map[string]*bintree{}},
			"Yii": &bintree{confGitignoreYii, map[string]*bintree{}},
			"ZendFramework": &bintree{confGitignoreZendframework, map[string]*bintree{}},
			"Zephir": &bintree{confGitignoreZephir, map[string]*bintree{}},
			"macOS": &bintree{confGitignoreMacos, map[string]*bintree{}},
		}},
		"label": &bintree{nil, map[string]*bintree{
			"Default": &bintree{confLabelDefault, map[string]*bintree{}},
		}},
		"license": &bintree{nil, map[string]*bintree{
			"Abstyles License": &bintree{confLicenseAbstylesLicense, map[string]*bintree{}},
			"Academic Free License v1.1": &bintree{confLicenseAcademicFreeLicenseV11, map[string]*bintree{}},
			"Academic Free License v1.2": &bintree{confLicenseAcademicFreeLicenseV12, map[string]*bintree{}},
			"Academic Free License v2.0": &bintree{confLicenseAcademicFreeLicenseV20, map[string]*bintree{}},
			"Academic Free License v2.1": &bintree{confLicenseAcademicFreeLicenseV21, map[string]*bintree{}},
			"Academic Free License v3.0": &bintree{confLicenseAcademicFreeLicenseV30, map[string]*bintree{}},
			"Affero General Public License v1.0": &bintree{confLicenseAfferoGeneralPublicLicenseV10, map[string]*bintree{}},
			"Apache License 1.0": &bintree{confLicenseApacheLicense10, map[string]*bintree{}},
			"Apache License 1.1": &bintree{confLicenseApacheLicense11, map[string]*bintree{}},
			"Apache License 2.0": &bintree{confLicenseApacheLicense20, map[string]*bintree{}},
			"Artistic License 1.0": &bintree{confLicenseArtisticLicense10, map[string]*bintree{}},
			"Artistic License 2.0": &bintree{confLicenseArtisticLicense20, map[string]*bintree{}},
			"BSD 2-clause License": &bintree{confLicenseBsd2ClauseLicense, map[string]*bintree{}},
			"BSD 3-clause License": &bintree{confLicenseBsd3ClauseLicense, map[string]*bintree{}},
			"BSD 4-clause License": &bintree{confLicenseBsd4ClauseLicense, map[string]*bintree{}},
			"Creative Commons CC0 1.0 Universal": &bintree{confLicenseCreativeCommonsCc010Universal, map[string]*bintree{}},
			"Eclipse Public License 1.0": &bintree{confLicenseEclipsePublicLicense10, map[string]*bintree{}},
			"Educational Community License v1.0": &bintree{confLicenseEducationalCommunityLicenseV10, map[string]*bintree{}},
			"Educational Community License v2.0": &bintree{confLicenseEducationalCommunityLicenseV20, map[string]*bintree{}},
			"GNU Affero General Public License v3.0": &bintree{confLicenseGnuAfferoGeneralPublicLicenseV30, map[string]*bintree{}},
			"GNU Free Documentation License v1.1": &bintree{confLicenseGnuFreeDocumentationLicenseV11, map[string]*bintree{}},
			"GNU Free Documentation License v1.2": &bintree{confLicenseGnuFreeDocumentationLicenseV12, map[string]*bintree{}},
			"GNU Free Documentation License v1.3": &bintree{confLicenseGnuFreeDocumentationLicenseV13, map[string]*bintree{}},
			"GNU General Public License v1.0": &bintree{confLicenseGnuGeneralPublicLicenseV10, map[string]*bintree{}},
			"GNU General Public License v2.0": &bintree{confLicenseGnuGeneralPublicLicenseV20, map[string]*bintree{}},
			"GNU General Public License v3.0": &bintree{confLicenseGnuGeneralPublicLicenseV30, map[string]*bintree{}},
			"GNU Lesser General Public License v2.1": &bintree{confLicenseGnuLesserGeneralPublicLicenseV21, map[string]*bintree{}},
			"GNU Lesser General Public License v3.0": &bintree{confLicenseGnuLesserGeneralPublicLicenseV30, map[string]*bintree{}},
			"GNU Library General Public License v2.0": &bintree{confLicenseGnuLibraryGeneralPublicLicenseV20, map[string]*bintree{}},
			"ISC license": &bintree{confLicenseIscLicense, map[string]*bintree{}},
			"MIT License": &bintree{confLicenseMitLicense, map[string]*bintree{}},
			"Mozilla Public License 1.0": &bintree{confLicenseMozillaPublicLicense10, map[string]*bintree{}},
			"Mozilla Public License 1.1": &bintree{confLicenseMozillaPublicLicense11, map[string]*bintree{}},
			"Mozilla Public License 2.0": &bintree{confLicenseMozillaPublicLicense20, map[string]*bintree{}},
		}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_bg-BG.ini": &bintree{confLocaleLocale_bgBgIni, map[string]*bintree{}},
			"locale_cs-CZ.ini": &bintree{confLocaleLocale_csCzIni, map[string]*bintree{}},
			"locale_de-DE.ini": &bintree{confLocaleLocale_deDeIni, map[string]*bintree{}},
			"locale_en-GB.ini": &bintree{confLocaleLocale_enGbIni, map[string]*bintree{}},
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_es-ES.ini": &bintree{confLocaleLocale_esEsIni, map[string]*bintree{}},
			"locale_fi-FI.ini": &bintree{confLocaleLocale_fiFiIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
			"locale_gl-ES.ini": &bintree{confLocaleLocale_glEsIni, map[string]*bintree{}},
			"locale_hu-HU.ini": &bintree{confLocaleLocale_huHuIni, map[string]*bintree{}},
			"locale_it-IT.ini": &bintree{confLocaleLocale_itItIni, map[string]*bintree{}},
			"locale_ja-JP.ini": &bintree{confLocaleLocale_jaJpIni, map[string]*bintree{}},
			"locale_ko-KR.ini": &bintree{confLocaleLocale_koKrIni, map[string]*bintree{}},
			"locale_lv-LV.ini": &bintree{confLocaleLocale_lvLvIni, map[string]*bintree{}},
			"locale_nl-NL.ini": &bintree{confLocaleLocale_nlNlIni, map[string]*bintree{}},
			"locale_pl-PL.ini": &bintree{confLocaleLocale_plPlIni, map[string]*bintree{}},
			"locale_pt-BR.ini": &bintree{confLocaleLocale_ptBrIni, map[string]*bintree{}},
			"locale_ru-RU.ini": &bintree{confLocaleLocale_ruRuIni, map[string]*bintree{}},
			"locale_sr-SP.ini": &bintree{confLocaleLocale_srSpIni, map[string]*bintree{}},
			"locale_sv-SE.ini": &bintree{confLocaleLocale_svSeIni, map[string]*bintree{}},
			"locale_tr-TR.ini": &bintree{confLocaleLocale_trTrIni, map[string]*bintree{}},
			"locale_uk-UA.ini": &bintree{confLocaleLocale_ukUaIni, map[string]*bintree{}},
			"locale_zh-CN.ini": &bintree{confLocaleLocale_zhCnIni, map[string]*bintree{}},
			"locale_zh-HK.ini": &bintree{confLocaleLocale_zhHkIni, map[string]*bintree{}},
			"locale_zh-TW.ini": &bintree{confLocaleLocale_zhTwIni, map[string]*bintree{}},
		}},
		"readme": &bintree{nil, map[string]*bintree{
			"Default": &bintree{confReadmeDefault, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

